---
import { Image } from "astro:assets";
import addDocumentIcon from "../assets/icons/document_add.svg";
import uploadIcon from "../assets/icons/upload.svg";

interface Props {
  id?: string;
  name?: string;
  accept?: string;
  maxSizeMB?: number;
  multiple?: boolean;
  label?: string;
  sizeFormatPdf?: string;
}

const {
  id = "upload-file",
  name = "file",
  accept = "application/pdf",
  maxSizeMB = 25,
  multiple = false,
  label = "Importer un dossier",
  sizeFormatPdf,
} = Astro.props;
---

<section
  class="upload"
  data-input-id={id}
  data-accept={accept}
  data-max-bytes={(maxSizeMB * 1024 * 1024).toString()}
  data-multiple={multiple ? "true" : "false"}
>
  <div class="upload__inner">
    <!-- input fichier (toujours présent) -->
    <input
      id={id}
      name={name}
      class="visually-hidden"
      type="file"
      accept={accept}
      {...multiple ? { multiple: true } : {}}
      aria-describedby="upload-help upload-constraints upload-status"
    />

    <!-- Dropzone (contient le bouton) -->
    <div
      id="dropzone"
      class="dropzone"
      role="button"
      tabindex="0"
      aria-describedby="upload-help upload-constraints"
    >
      <div class="dropzone__content">
        <div class="dropzone__icon" aria-hidden="true">
          <Image src={uploadIcon} alt="" />
        </div>
        <p class="dropzone__text">Glissez et déposez votre dossier ici</p>
        <p class="dropzone__or">ou</p>
        <label class="btn" for={id} data-variant="secondary"
          >{label} <Image src={addDocumentIcon} alt="" /></label
        >
      </div>
    </div>

    <p id="upload-constraints" class="upload__constraints">
      {sizeFormatPdf}
    </p>

    <div id="upload-status" class="upload__status" aria-live="polite"></div>
    <p id="upload-help" class="visually-hidden">
      Utilisez le bouton pour choisir un fichier, ou glissez-déposez un fichier
      dans la zone (la zone de dépôt n’est visible qu’à partir de 992 px).
    </p>
  </div>

  <script is:inline>
    (() => {
      const root = document.currentScript.closest(".upload");
      const ACCEPT = root.dataset.accept || "";
      const MAX_BYTES = parseInt(root.dataset.maxBytes || "0", 10);
      const IS_MULTIPLE = root.dataset.multiple === "true";

      const input = root.querySelector('input[type="file"]');
      const dz = root.querySelector("#dropzone");
      const status = root.querySelector("#upload-status");

      const label = dz.querySelector("label");
      if (label) {
        label.addEventListener("click", (e) => {
          // On laisse le comportement natif du label (ouvre la popup),
          // mais on empêche la remontée vers .dropzone.
          e.stopPropagation();
          // NE PAS faire input.click() ici !
        });
      }

      const prevent = (e) => {
        e.preventDefault();
        e.stopPropagation();
      };

      function validateFiles(fileList) {
        const files = Array.from(fileList || []);
        if (!files.length)
          return { ok: false, msg: "⚠️ Aucun fichier sélectionné." };

        const typeOK = files.every(
          (f) =>
            !ACCEPT ||
            f.type === ACCEPT ||
            (ACCEPT === "application/pdf" &&
              f.name.toLowerCase().endsWith(".pdf"))
        );
        if (!typeOK)
          return {
            ok: false,
            msg: "⚠️ Votre dossier doit être au format .pdf",
          };

        const sizeOK = files.every((f) => f.size <= MAX_BYTES);
        if (!sizeOK)
          return {
            ok: false,
            msg: `⚠️ Taille trop importante. Maximum ${Math.round(MAX_BYTES / 1024 / 1024)} Mo.`,
          };

        return {
          ok: true,
          msg: files
            .map(
              (f) =>
                `✅ Sélectionné : ${f.name} (${(f.size / 1024 / 1024).toFixed(2)} Mo)`
            )
            .join(" • "),
        };
      }

      function report({ ok, msg }) {
        status.textContent = msg;
        status.classList.toggle("is-error", !ok);
        status.classList.toggle("is-ok", ok);
      }

      // --- Sélection via le bouton : on VALIDE SEULEMENT (pas de réassignation)
      input.addEventListener("change", () => {
        const res = validateFiles(input.files);
        report(res);
        // Optionnel: pour autoriser à re-choisir le même fichier juste après
        // si besoin : if (res.ok) input.value = '';
      });

      // --- DnD : on assigne au champ fichier SANS déclencher "change"
      function setFilesOnInput(files) {
        const dt = new DataTransfer();
        for (const f of files) dt.items.add(f);
        input.files = dt.files; // pas d'input.dispatchEvent('change')
        const res = validateFiles(files); // on valide/affiche manuellement
        report(res);
      }

      // Empêcher l’ouverture du PDF dans le navigateur
      ["dragover", "drop"].forEach((ev) =>
        document.addEventListener(ev, prevent, false)
      );

      // Gestion DnD sur la zone
      ["dragenter", "dragover", "dragleave", "drop"].forEach((ev) =>
        dz.addEventListener(ev, prevent, false)
      );
      ["dragenter", "dragover"].forEach((ev) =>
        dz.addEventListener(ev, () => dz.classList.add("is-hover"))
      );
      ["dragleave", "drop"].forEach((ev) =>
        dz.addEventListener(ev, () => dz.classList.remove("is-hover"))
      );

      dz.addEventListener("drop", (e) => {
        const files = Array.from(e.dataTransfer?.files || []);
        if (!IS_MULTIPLE && files.length > 1) {
          report({
            ok: false,
            msg: "Vous ne pouvez déposer qu’un seul fichier.",
          });
          return;
        }
        setFilesOnInput(files);
      });

      // Accessibilité clavier / clic
      dz.addEventListener("keydown", (e) => {
        if (e.key === "Enter" || e.key === " ") {
          e.preventDefault();
          input.click();
        }
      });
      dz.addEventListener("click", (e) => {
        // Si le clic vient du label (ou d’un enfant du label), on ne fait rien.
        if (e.target instanceof Element && e.target.closest("label")) return;
        input.click(); // clic ailleurs dans la zone => ouvrir
      });
    })();
  </script>

  <style lang="scss">
    @use "../styles/abstracts";

    .visually-hidden {
      position: absolute !important;
      width: 1px;
      height: 1px;
      overflow: hidden;
      clip: rect(0 0 0 0);
      white-space: nowrap;
      clip-path: inset(50%);
    }

    .upload {
      margin-top: 1.5rem;

      &__inner {
        display: grid;
        gap: 1rem;
      }
      &__title {
        font-size: 1.125rem;
        margin: 0;
      }
      &__constraints {
        text-align: center;
        font-style: italic;
      }
      &__status {
        display: none;
        padding: 10px 12px;
        border-radius: 8px;
        text-align: center;
        @include abstracts.typography(
          abstracts.$font-paragraph,
          18px,
          28px,
          700
        );
        &.is-ok {
          color: abstracts.$color-success;
          display: block;
          background: abstracts.$color-success-transparent;
        }
        &.is-error {
          color: abstracts.$color-error;
          display: block;
          background: abstracts.$color-error-transparent;
        }
      }
    }

    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
      padding: 0.875rem 1.25rem;
      border-radius: abstracts.rem(4px);
      border: 1px solid abstracts.$color-blue;
      background: abstracts.$color-white;
      color: abstracts.$color-blue-shade-1;
      cursor: pointer;
      line-height: 1;
      text-decoration: none;
      text-transform: uppercase;
      &:hover {
        background: abstracts.$color-silver;
      }
      &:active {
        background: #c9dfe6;
      }
      &:focus-visible {
        outline: 3px solid #82d0e6;
        outline-offset: 2px;
      }
    }

    .dropzone {
      display: block;
      width: max-content;
      margin: auto;

      .dropzone__content {
        display: grid;
        justify-items: center;
        gap: abstracts.rem(20px);

        .btn {
          img {
            height: 24px;
            width: 24px;
          }
        }
      }
      .dropzone__icon,
      .dropzone__text,
      .dropzone__or {
        display: none;
      }
      &:focus-visible {
        outline: 3px solid #82d0e6;
        outline-offset: 2px;
      }
    }

    @media (min-width: 992px) {
      .dropzone {
        width: auto;
        margin: initial;
        padding: 2rem;
        border-radius: 1rem;
        background: abstracts.$color-silver;

        background-image: repeating-linear-gradient(
            90deg,
            #5f9cb4,
            #5f9cb4 8px,
            transparent 8px,
            transparent 20px
          ),
          repeating-linear-gradient(
            180deg,
            #5f9cb4,
            #5f9cb4 8px,
            transparent 8px,
            transparent 20px
          ),
          repeating-linear-gradient(
            90deg,
            #5f9cb4,
            #5f9cb4 8px,
            transparent 8px,
            transparent 20px
          ),
          repeating-linear-gradient(
            180deg,
            #5f9cb4,
            #5f9cb4 8px,
            transparent 8px,
            transparent 20px
          );
        background-position:
          left 6px top,
          right top 6px,
          left 6px bottom,
          left top 6px;
        background-repeat: repeat-x, repeat-y, repeat-x, repeat-y;
        background-size:
          calc(100% * 20) 2px,
          2px calc(100% * 20),
          calc(100% * 20) 2px,
          2px calc(100% * 20);

        .dropzone__icon,
        .dropzone__text,
        .dropzone__or {
          display: block;
        }
        .dropzone__icon {
          font-size: 1.75rem;
          margin-bottom: 0.25rem;
        }
        .dropzone__text {
          margin: 0;
          @include abstracts.typography(
            abstracts.$font-paragraph,
            18px,
            28px,
            400
          );
        }
        .dropzone__or {
          margin: 0.25rem 0;
          opacity: 0.7;
        }
        &.is-hover {
          background: #eef8fb;
          border-color: #0a7ea4;
        }
      }
    }
  </style>
</section>
