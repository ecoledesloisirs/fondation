---
interface Props {
  id?: string;
  name?: string; // name du champ fichier dans le <form>
  maxSize?: number; // en octets (par défaut 25 Mo)
  accept?: string; // MIME(s) acceptés
  buttonLabel?: string;
  help?: string;
}

const {
  id = "project-file",
  name = "file",
  maxSize = 25 * 1024 * 1024,
  accept = "application/pdf",
  buttonLabel = "Importer un dossier",
  help = "Poids maximal du dossier : 25 Mo | Formats acceptés : format PDF",
} = Astro.props;
---

<div class="dropzone" id={id} data-max={maxSize} data-accept={accept}>
  <input id={`${id}-input`} name={name} type="file" accept={accept} hidden />

  <div
    class="dz-area"
    role="group"
    aria-labelledby={`${id}-label`}
    tabindex="0"
  >
    <svg class="dz-icon" aria-hidden="true" viewBox="0 0 24 24"
      ><path
        d="M12 16v-8m0 0l-3 3m3-3l3 3M5 20h14a2 2 0 002-2v-3a4 4 0 00-4-4H7a4 4 0 00-4 4v3a2 2 0 002 2z"
        fill="none"
        stroke="currentColor"
        stroke-width="1.5"
        stroke-linecap="round"></path></svg
    >
    <p id={`${id}-label`} class="dz-title">
      Glissez et déposez votre dossier ici
    </p>

    <div class="dz-sep" aria-hidden="true"><span>ou</span></div>

    <button class="dz-btn" type="button">{buttonLabel}</button>
    <p class="dz-help">{help}</p>

    <output class="dz-file" hidden></output>
    <p class="dz-error" role="alert" hidden></p>
  </div>
</div>

<style>
  .dropzone {
    --dz-border: #bfd7e5;
    --dz-border-active: #27566d;
    --dz-bg: #f4fafd;
    --dz-text: #27566d;
  }
  .dz-area {
    border: 2px dashed var(--dz-border);
    border-radius: 12px;
    padding: 28px 22px;
    text-align: center;
    background: var(--dz-bg);
    color: var(--dz-text);
    transition:
      border-color 0.15s,
      box-shadow 0.15s;
  }
  .dropzone.is-drag .dz-area {
    border-color: var(--dz-border-active);
    box-shadow: 0 0 0 3px rgba(39, 86, 109, 0.12);
  }
  .dz-icon {
    width: 32px;
    height: 32px;
    opacity: 0.7;
    margin-bottom: 10px;
  }
  .dz-title {
    font-weight: 700;
    margin: 0 0 10px;
  }
  .dz-sep {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 10px;
    margin: 10px 0 14px;
    color: #6e8a9a;
  }
  .dz-sep::before,
  .dz-sep::after {
    content: "";
    flex: 1;
    height: 1px;
    background: #e1eef5;
  }
  .dz-sep span {
    padding: 0 6px;
  }
  .dz-btn {
    border: 2px solid var(--dz-text);
    border-radius: 10px;
    background: #fff;
    color: var(--dz-text);
    padding: 10px 18px;
    font-weight: 700;
    cursor: pointer;
  }
  .dz-help {
    margin: 10px 0 0;
    font-size: 12px;
    color: #6e8a9a;
  }
  .dz-file {
    display: block;
    margin-top: 12px;
    font-size: 14px;
  }
  .dz-error {
    margin-top: 8px;
    color: #b00020;
    font-weight: 600;
  }
</style>

<script>
  (function () {
    const root = document.currentScript.closest(".dropzone");
    const input = root.querySelector('input[type="file"]');
    const btn = root.querySelector(".dz-btn");
    const area = root.querySelector(".dz-area");
    const out = root.querySelector(".dz-file");
    const err = root.querySelector(".dz-error");
    const max = Number(root.dataset.max || 0);
    const accept = (root.dataset.accept || "").split(",").map((s) => s.trim());

    function isAccepted(file) {
      if (!accept.length) return true;
      // accepte exact mime ou PDF générique
      return (
        accept.includes(file.type) ||
        (file.type === "" && file.name.toLowerCase().endsWith(".pdf"))
      );
    }

    function showError(msg) {
      err.textContent = msg;
      err.hidden = false;
    }
    function clearError() {
      err.hidden = true;
    }

    function handleFiles(list) {
      if (!list || !list.length) return;
      const f = list[0];

      if (!isAccepted(f))
        return showError("Seuls les fichiers PDF sont acceptés.");
      if (max && f.size > max)
        return showError(
          `Le fichier dépasse ${(max / 1024 / 1024).toFixed(0)} Mo.`
        );

      clearError();

      // alimente le <input type="file"> (compat)
      const dt = new DataTransfer();
      dt.items.add(f);
      input.files = dt.files;

      out.hidden = false;
      out.textContent = `${f.name} — ${(f.size / 1024 / 1024).toFixed(1)} Mo`;

      root.classList.add("has-file");
      // Event custom si besoin d’écouter à l’extérieur
      root.dispatchEvent(new CustomEvent("file-selected", { detail: f }));
    }

    btn.addEventListener("click", () => input.click());
    input.addEventListener("change", () => handleFiles(input.files));

    // drag & drop
    ["dragenter", "dragover"].forEach((evt) =>
      area.addEventListener(evt, (e) => {
        e.preventDefault();
        root.classList.add("is-drag");
      })
    );
    ["dragleave", "drop"].forEach((evt) =>
      area.addEventListener(evt, (e) => {
        e.preventDefault();
        root.classList.remove("is-drag");
      })
    );
    area.addEventListener("drop", (e) => handleFiles(e.dataTransfer.files));

    // Accessibilité clavier : Enter/Espace ouvre le sélecteur
    area.addEventListener("keydown", (e) => {
      if (e.key === " " || e.key === "Enter") {
        e.preventDefault();
        input.click();
      }
    });
  })();
</script>
