---
import Dropzone from "../../components/Dropzone.astro";
import Button from "../Button.astro";

interface ProjectSubmissionProps {
  id: string;
  item: {
    storage_space_start: string;
    storage_space_closed: string;
    title: string;
    text: string;
    text_outside_the_period: string;
    size_format_pdf: string;
    gdpr_text: string;
    optin_text: string;
  };
}

const { item } = Astro.props as ProjectSubmissionProps;

const DIRECTUS_BASE = import.meta.env.DEV
  ? "/directus"
  : import.meta.env.PUBLIC_DIRECTUS_URL;
---

<section aria-labelledby="project-submission-title">
  <div class="container">
    <div class="wrapper">
      <span aria-hidden="true" class="stage-number">04</span>
      <h2 id="project-submission-title">{item.title}</h2>
      <div
        id="project-submission-text"
        data-start={item.storage_space_start}
        data-end={item.storage_space_closed}
      >
        <div id="inside-period" class="richText" set:html={item.text} />
        <div
          id="outside-period"
          class="richText"
          set:html={item.text_outside_the_period}
        />
      </div>

      <form
        id="project-form"
        method="post"
        action="/api/submit-project"
        enctype="multipart/form-data"
        novalidate
      >
        <fieldset id="project-form-fieldset" class="project-form-fieldset">
          <div class="c-field">
            <label for="email">Email (champ obligatoire)</label>
            <input
              id="email"
              name="email"
              type="email"
              class="c-input"
              placeholder="Email"
              autocomplete="email"
              autocapitalize="off"
              spellcheck="false"
              required
            />
            <p class="c-alert c-alert--warn" id="err-email" role="alert" hidden>
              ⚠️ Veuillez renseigner une adresse e-mail valide
            </p>
          </div>

          <div class="visually-hidden" aria-hidden="true">
            <label for="company">Company</label>
            <input
              id="company"
              name="company"
              type="text"
              tabindex="-1"
              autocomplete="off"
            />
          </div>

          <input type="hidden" name="ts" value={Date.now()} />

          <Dropzone
            id="application-file"
            name="file"
            accept="application/pdf"
            maxSizeMB={25}
            label="Importer un dossier"
            sizeFormatPdf={item.size_format_pdf}
          />

          <p
            class="c-alert c-alert--error"
            id="err-file-size"
            role="alert"
            aria-live="polite"
            hidden
          >
            ⚠️ Le dossier est trop volumineux, veuillez réduire sa taille et
            réessayer (Max. 25Mo)
          </p>
          <p
            class="c-alert c-alert--error"
            id="err-file-type"
            role="alert"
            aria-live="polite"
            hidden
          >
            ⚠️ Votre dossier doit être au format .pdf
          </p>
          <p
            class="c-alert c-alert--warn"
            id="err-file-missing"
            role="alert"
            aria-live="polite"
            hidden
          >
            ⚠️ Veuillez joindre votre dossier
          </p>

          <div class="richText gdpr-text" set:html={item.gdpr_text} />

          <fieldset class="c-consent c-consent--checkbox">
            <legend class="visually-hidden"
              >Règlement de l’appel à projets</legend
            >
            <div class="c-consent__checkbox">
              <input
                type="checkbox"
                id="rules-consent"
                name="rules-consent"
                required
              />
              <label for="rules-consent"
                >J’ai lu et j’approuve le règlement relatif au dépôt des
                dossiers</label
              >
            </div>
            <p class="consent-link">
              <a
                href="/reglement-appel-a-projet"
                target="_blank"
                rel="noopener"
              >
                Consulter le règlement
                <span class="visually-hidden"
                  >(PDF, s’ouvre dans un nouvel onglet)</span
                >
              </a>
            </p>
          </fieldset>
          <p
            class="c-alert c-alert--warn"
            id="err-consent"
            role="alert"
            aria-live="polite"
            hidden
          >
            ⚠️ Veuillez cocher la case « J’ai lu et j’approuve le règlement de
            l’appel à projets »
          </p>

          <!-- CTA -->
          <div class="c-actions">
            <Button
              class="submit-btn"
              variant="primary"
              iconName="send"
              iconPosition="right"
              type="submit"
            >
              Envoyer mon dossier
            </Button>
          </div>
        </fieldset>

        <!-- Feedback -->
        <p
          class="c-alert c-alert--success"
          id="msg-success"
          role="status"
          aria-live="polite"
          hidden
        >
          ✅ Votre dossier a bien été envoyé.
        </p>
        <p
          class="c-alert c-alert--fail"
          id="msg-fail"
          role="alert"
          aria-live="assertive"
          hidden
        >
          ❌ En raison d’un problème technique, votre dossier n’a pas pu être
          envoyé. Veuillez réessayer plus tard.
        </p>
      </form>
    </div>
  </div>
</section>

<style lang="scss">
  @use "../../styles/abstracts";
  @use "../../styles/components/forms";

  section {
    padding-block: abstracts.rem(60px);

    .wrapper {
      max-width: abstracts.rem(800px);
    }

    h2 {
      margin: abstracts.rem(8px) 0 abstracts.rem(20px);
    }

    form {
      margin-top: abstracts.rem(18px);

      &.is-disabled {
        opacity: 0.5;

        input,
        select,
        textarea,
        button,
        label {
          cursor: not-allowed !important;
        }
      }
    }

    .project-form-fieldset {
      border: none;
      padding: 0;
      margin: 0;
    }

    .stage-number {
      color: abstracts.$color-secondary;
      @include abstracts.typography(abstracts.$font-title, 48px, 56px, 700);
    }

    .gdpr-text {
      @include abstracts.typography(abstracts.$font-paragraph, 14px, 20px, 400);
      padding: abstracts.rem(20px);
      border: 1px solid abstracts.$color-blue-tint-2;
      border-radius: abstracts.rem(12px);
      margin-top: abstracts.rem(36px);

      :global(p:not(.gdpr-title)) {
        margin: 0;
      }
    }

    :global(.gdpr-title) {
      margin: 0 0 abstracts.rem(30px);
    }

    .consent-link {
      margin-top: abstracts.rem(20px);
      font-size: 0.95rem;
      color: #0a4b68;

      a {
        text-decoration: underline;
        color: inherit;

        &:focus-visible {
          outline: 3px solid #0a6ebd;
          outline-offset: 2px;
          border-radius: 4px;
        }
        &:hover {
          text-decoration: none;
        }
      }
    }
  }

  @media (min-width: 415px) {
    section {
      /* micro-ajustement visuel du check custom si besoin */
      .c-consent input[type="checkbox"]:checked + label::after {
        top: 12px;
      }
    }
  }

  @include abstracts.respond-above(md) {
    section {
      .c-consent input[type="checkbox"]:checked + label::after {
        top: 0;
      }
    }
  }
</style>

<script is:inline>
  (() => {
    const form = document.getElementById("project-form");
    const formFieldset = document.getElementById("project-form-fieldset");
    const email = document.getElementById("email");
    const consent = document.getElementById("rules-consent");
    const fileInput = form.querySelector('input[type="file"][name="file"]');
    const submitBtn = form.querySelector(".submit-btn");

    const A = {
      email: document.getElementById("err-email"),
      fileMissing: document.getElementById("err-file-missing"),
      fileSize: document.getElementById("err-file-size"),
      fileType: document.getElementById("err-file-type"),
      consent: document.getElementById("err-consent"),
      success: document.getElementById("msg-success"),
      fail: document.getElementById("msg-fail"),
    };

    function linkDescribedBy(ctrl, ...alerts) {
      const ids = alerts
        .filter(Boolean)
        .map((el) => el.id)
        .join(" ");
      if (ids) ctrl.setAttribute("aria-describedby", ids);
    }
    linkDescribedBy(email, A.email);
    linkDescribedBy(consent, A.consent);
    linkDescribedBy(fileInput, A.fileMissing, A.fileSize, A.fileType);

    const MAX_BYTES = 25 * 1024 * 1024;
    const ACCEPT = "application/pdf";
    const hide = (el) => el && (el.hidden = true);
    const show = (el) => el && (el.hidden = false);
    const hideAll = (...els) => els.forEach(hide);
    const markInvalid = (el, invalid) =>
      el?.setAttribute("aria-invalid", invalid ? "true" : "false");

    email.addEventListener("input", () => {
      hide(A.email);
      markInvalid(email, false);
    });
    consent.addEventListener("change", () => {
      hide(A.consent);
      markInvalid(consent, false);
    });
    fileInput.addEventListener("change", () => {
      hideAll(A.fileMissing, A.fileSize, A.fileType);
      markInvalid(fileInput, false);
    });

    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      hideAll(
        A.success,
        A.fail,
        A.email,
        A.fileMissing,
        A.fileSize,
        A.fileType,
        A.consent
      );
      markInvalid(email, false);
      markInvalid(consent, false);
      markInvalid(fileInput, false);

      let firstInvalid = null;

      if (!email.value.trim() || email.validity.typeMismatch) {
        show(A.email);
        markInvalid(email, true);
        firstInvalid ??= email;
      }

      const files = fileInput.files ? Array.from(fileInput.files) : [];
      if (files.length === 0) {
        show(A.fileMissing);
        markInvalid(fileInput, true);
        firstInvalid ??= fileInput.closest(".dropzone") || fileInput;
      } else {
        const f = files[0];
        if (!(f.type === ACCEPT || f.name.toLowerCase().endsWith(".pdf"))) {
          show(A.fileType);
          markInvalid(fileInput, true);
          firstInvalid ??= fileInput.closest(".dropzone") || fileInput;
        }
        if (f.size > MAX_BYTES) {
          show(A.fileSize);
          markInvalid(fileInput, true);
          firstInvalid ??= fileInput.closest(".dropzone") || fileInput;
        }
      }

      if (!consent.checked) {
        show(A.consent);
        markInvalid(consent, true);
        firstInvalid ??= consent;
      }

      if (firstInvalid) {
        firstInvalid.focus?.();
        return;
      }

      submitBtn.setAttribute("data-loading", "true");
      submitBtn.setAttribute("aria-busy", "true");
      form.setAttribute("aria-busy", "true");
      submitBtn.disabled = true;

      try {
        const fd = new FormData(form);
        const res = await fetch(form.action, { method: "POST", body: fd });
        const data = await res.json().catch(() => ({}));
        if (res.ok && data?.ok) {
          show(A.success);
          form.reset();
          const status = document.getElementById("upload-status");
          if (status) status.textContent = "";
          markInvalid(email, false);
          markInvalid(consent, false);
          markInvalid(fileInput, false);
        } else {
          show(A.fail);
        }
      } catch {
        show(A.fail);
      } finally {
        submitBtn.removeAttribute("data-loading");
        submitBtn.removeAttribute("aria-busy");
        form.removeAttribute("aria-busy");
        submitBtn.disabled = false;
      }
    });

    const projectSubmissionText = document.getElementById(
      "project-submission-text"
    );
    const start = new Date(projectSubmissionText.dataset.start);
    const end = new Date(projectSubmissionText.dataset.end);
    const now = new Date();

    const inside = document.getElementById("inside-period");
    const outside = document.getElementById("outside-period");

    // const isActive = now >= start && now <= end;
    const isActive = true;

    if (isActive) {
      outside.style.display = "none";
    } else {
      inside.style.display = "none";
    }

    if (!isActive) {
      formFieldset.disabled = true;
      form.setAttribute("aria-disabled", "true");
      form.classList.add("is-disabled");

      const dz = form.querySelector(".dropzone");
      dz?.setAttribute("data-disabled", "true");
    } else {
      fs.disabled = false;
      form.removeAttribute("aria-disabled");
      form.classList.remove("is-disabled");
    }
  })();
</script>
