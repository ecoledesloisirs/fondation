---
import Button from "../Button.astro";

interface ContactFormProps {
  id: string;
  item: {
    title: string;
    description: string;
    gdpr_text: string;
  };
}

const {
  id,
  item: { title, description, gdpr_text },
} = Astro.props as ContactFormProps;
---

<section aria-labelledby="contact-form-title">
  <div class="container">
    <div class="wrapper">
      <h2 id="contact-form-title">{title}</h2>
      <p>{description}</p>

      <form
        id="contact-form"
        method="post"
        action="/api/submit-contact"
        novalidate
      >
        <div class="c-row c-row--2">
          <div class="c-col c-field">
            <label for="last-name">Nom <span aria-hidden="true">*</span></label>
            <input
              id="last-name"
              name="last_name"
              type="text"
              class="c-input"
              autocomplete="family-name"
              placeholder="Nom"
              required
            />
            <p
              class="c-alert c-alert--warn"
              id="err-last-name"
              role="alert"
              hidden
            >
              ⚠️ Veuillez renseigner votre nom.
            </p>
          </div>

          <div class="c-col c-field">
            <label for="first-name"
              >Prénom <span aria-hidden="true">*</span></label
            >
            <input
              id="first-name"
              name="first_name"
              type="text"
              class="c-input"
              autocomplete="given-name"
              placeholder="Prénom"
              required
            />
            <p
              class="c-alert c-alert--warn"
              id="err-first-name"
              role="alert"
              hidden
            >
              ⚠️ Veuillez renseigner votre prénom.
            </p>
          </div>
        </div>

        <div class="c-field">
          <label for="organization">Organisation</label>
          <input
            id="organization"
            name="organization"
            type="text"
            class="c-input"
            autocomplete="organization"
            placeholder="Organisation"
          />
        </div>

        <div class="c-row c-row--2">
          <div class="c-col c-field">
            <label for="email">Email <span aria-hidden="true">*</span></label>
            <input
              id="email"
              name="email"
              type="email"
              class="c-input"
              inputmode="email"
              autocomplete="email"
              placeholder="Email"
              required
            />
            <p class="c-alert c-alert--warn" id="err-email" role="alert" hidden>
              ⚠️ Veuillez renseigner une adresse e-mail valide.
            </p>
          </div>

          <div class="c-col c-field">
            <label for="phone"
              >Téléphone <span aria-hidden="true">*</span></label
            >
            <input
              id="phone"
              name="phone"
              type="tel"
              class="c-input"
              inputmode="tel"
              autocomplete="tel"
              placeholder="Téléphone"
              required
            />
            <p class="c-alert c-alert--warn" id="err-phone" role="alert" hidden>
              ⚠️ Veuillez renseigner un numéro de téléphone valide.
            </p>
          </div>
        </div>

        <div class="c-field">
          <label for="subject"
            >Objet de votre demande <span aria-hidden="true">*</span></label
          >
          <input
            id="subject"
            name="subject"
            type="text"
            class="c-input"
            placeholder="Sujet"
            required
          />
          <p class="c-alert c-alert--warn" id="err-subject" role="alert" hidden>
            ⚠️ Veuillez préciser l’objet de votre demande.
          </p>
        </div>

        <div class="c-field">
          <label for="message"
            >Votre message <span aria-hidden="true">*</span></label
          >
          <textarea
            id="message"
            name="message"
            rows="6"
            class="c-input c-input--textarea"
            placeholder="Message..."
            required></textarea>
          <p class="required-field-text">* Champs obligatoires</p>
          <p class="c-alert c-alert--warn" id="err-message" role="alert" hidden>
            ⚠️ Le message est obligatoire.
          </p>
        </div>

        <div class="visually-hidden" aria-hidden="true">
          <label for="company">Company</label>
          <input
            id="company"
            name="company"
            type="text"
            tabindex="-1"
            autocomplete="off"
          />
        </div>

        <div class="c-actions">
          <Button
            class="submit-btn"
            variant="primary"
            iconName="right"
            iconPosition="right"
            type="submit"
          >
            Envoyer
          </Button>
        </div>

        <p
          class="c-alert c-alert--success"
          id="msg-success"
          role="status"
          aria-live="polite"
          hidden
        >
          ✅ Merci ! Votre message a bien été envoyé.
        </p>
        <p
          class="c-alert c-alert--fail"
          id="msg-fail"
          role="alert"
          aria-live="assertive"
          hidden
        >
          ❌ Une erreur est survenue. Veuillez réessayer plus tard.
        </p>

        <div class="richText gdpr-text" set:html={gdpr_text} />
      </form>
    </div>
  </div>
</section>

<style lang="scss">
  @use "../../styles/abstracts" as *;
  @use "../../styles/components/forms";

  section {
    padding-block: rem(60px);

    .wrapper {
      max-width: rem(800px);
    }
    h2 {
      margin: rem(8px) 0 rem(20px);
    }
    form {
      margin-top: rem(18px);
    }

    .gdpr-text {
      margin-top: rem(20px);
      @include typography($font-paragraph, 14px, 16px, 400);
    }

    .required-field-text {
      margin-top: rem(12px);
      font-style: italic;
      @include typography($font-paragraph, 14px, 20px, 400);
    }
  }
</style>

<script is:inline>
  (() => {
    const form = document.getElementById("contact-form");
    const submitBtn = form.querySelector(".submit-btn");

    const F = {
      lastName: document.getElementById("last-name"),
      firstName: document.getElementById("first-name"),
      organization: document.getElementById("organization"),
      email: document.getElementById("email"),
      phone: document.getElementById("phone"),
      subject: document.getElementById("subject"),
      message: document.getElementById("message"),
      consent: document.getElementById("privacy-consent"),
    };

    const A = {
      lastName: document.getElementById("err-last-name"),
      firstName: document.getElementById("err-first-name"),
      email: document.getElementById("err-email"),
      phone: document.getElementById("err-phone"),
      subject: document.getElementById("err-subject"),
      message: document.getElementById("err-message"),
      consent: document.getElementById("err-consent"),
      success: document.getElementById("msg-success"),
      fail: document.getElementById("msg-fail"),
    };

    function link(ctrl, ...alerts) {
      const ids = alerts
        .filter(Boolean)
        .map((el) => el.id)
        .join(" ");
      if (ids) ctrl.setAttribute("aria-describedby", ids);
    }
    link(F.lastName, A.lastName);
    link(F.firstName, A.firstName);
    link(F.email, A.email);
    link(F.phone, A.phone);
    link(F.subject, A.subject);
    link(F.message, A.message);
    link(F.consent, A.consent);

    const hide = (el) => el && (el.hidden = true);
    const show = (el) => el && (el.hidden = false);
    const hideAll = (...els) => els.forEach(hide);
    const markInvalid = (el, invalid) =>
      el?.setAttribute("aria-invalid", invalid ? "true" : "false");

    const PHONE_RE = /^[+()\-.\s\d]{6,}$/;

    [F.lastName, F.firstName, F.email, F.phone, F.subject, F.message].forEach(
      (el) => {
        el.addEventListener("input", () => {
          Object.values(A).forEach(hide);
          markInvalid(el, false);
        });
      }
    );
    F.consent?.addEventListener("change", () => {
      hide(A.consent);
      markInvalid(F.consent, false);
    });

    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      hideAll(
        A.success,
        A.fail,
        A.lastName,
        A.firstName,
        A.email,
        A.phone,
        A.subject,
        A.message,
        A.consent
      );
      Object.values(F).forEach((el) => markInvalid(el, false));

      let firstInvalid = null;

      if (!F.lastName.value.trim()) {
        show(A.lastName);
        markInvalid(F.lastName, true);
        firstInvalid ??= F.lastName;
      }
      if (!F.firstName.value.trim()) {
        show(A.firstName);
        markInvalid(F.firstName, true);
        firstInvalid ??= F.firstName;
      }
      if (!F.email.value.trim() || F.email.validity.typeMismatch) {
        show(A.email);
        markInvalid(F.email, true);
        firstInvalid ??= F.email;
      }
      if (!F.phone.value.trim() || !PHONE_RE.test(F.phone.value.trim())) {
        show(A.phone);
        markInvalid(F.phone, true);
        firstInvalid ??= F.phone;
      }
      if (!F.subject.value.trim()) {
        show(A.subject);
        markInvalid(F.subject, true);
        firstInvalid ??= F.subject;
      }
      if (!F.message.value.trim()) {
        show(A.message);
        markInvalid(F.message, true);
        firstInvalid ??= F.message;
      }
      if (!F.consent?.checked) {
        show(A.consent);
        markInvalid(F.consent, true);
        firstInvalid ??= F.consent;
      }

      if (firstInvalid) {
        firstInvalid.focus?.();
        return;
      }

      submitBtn.setAttribute("data-loading", "true");
      submitBtn.setAttribute("aria-busy", "true");
      submitBtn.disabled = true;

      try {
        const fd = new FormData(form);
        const res = await fetch(form.action, { method: "POST", body: fd });
        const data = await res.json().catch(() => ({}));
        if (res.ok && data?.ok) {
          show(A.success);
          form.reset();
        } else {
          show(A.fail);
        }
      } catch {
        show(A.fail);
      } finally {
        submitBtn.removeAttribute("data-loading");
        submitBtn.removeAttribute("aria-busy");
        submitBtn.disabled = false;
      }
    });
  })();
</script>
